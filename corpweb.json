{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "CloudFormation template for creating a basic web application infrastructure.",
    "Parameters": {
      "InstanceType": {
        "Description": "Server instance type",
        "Type": "String",
        "AllowedValues": ["t2.micro", "t2.small"],
        "Default": "t2.micro",
        "ConstraintDescription": "Must be a valid EC2 instance type."
      },
      "KeyPair": {
        "Description": "The EC2 KeyPair to allow SSH access to the instances",
        "Type": "AWS::EC2::KeyPair::KeyName",
        "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
      },
      "YourIp": {
        "Description": "Your IP address in CIDR notation for SSH access",
        "Type": "String",
        "MinLength": "9",
        "MaxLength": "18",
        "Default": "0.0.0.0/0",
        "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
        "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
      }
    },
    "Resources": {
      "EngineeringVpc": {
        "Type": "AWS::EC2::VPC",
        "Properties": {
          "CidrBlock": "10.0.0.0/18",
          "EnableDnsSupport": true,
          "EnableDnsHostnames": true,
          "Tags": [{"Key": "Name", "Value": "EngineeringVpc"}]
        }
      },
      "PublicSubnet1": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
          "VpcId": {"Ref": "EngineeringVpc"},
          "CidrBlock": "10.0.0.0/24",
          "AvailabilityZone": {"Fn::Select": ["0", {"Fn::GetAZs": ""}]},
          "MapPublicIpOnLaunch": true,
          "Tags": [{"Key": "Name", "Value": "PublicSubnet1"}]
        }
      },
      "PublicSubnet2": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
          "VpcId": {"Ref": "EngineeringVpc"},
          "CidrBlock": "10.0.1.0/24",
          "AvailabilityZone": {"Fn::Select": ["1", {"Fn::GetAZs": ""}]},
          "MapPublicIpOnLaunch": true,
          "Tags": [{"Key": "Name", "Value": "PublicSubnet2"}]
        }
      },
      "InternetGateway": {
        "Type": "AWS::EC2::InternetGateway",
        "Properties": {}
      },
      "GatewayAttachment": {
        "Type": "AWS::EC2::VPCGatewayAttachment",
        "Properties": {
          "VpcId": {"Ref": "EngineeringVpc"},
          "InternetGatewayId": {"Ref": "InternetGateway"}
        }
      },
      "RouteTable": {
        "Type": "AWS::EC2::RouteTable",
        "Properties": {
          "VpcId": {"Ref": "EngineeringVpc"}
        }
      },
      "PublicRoute": {
        "Type": "AWS::EC2::Route",
        "Properties": {
          "RouteTableId": {"Ref": "RouteTable"},
          "DestinationCidrBlock": "0.0.0.0/0",
          "GatewayId": {"Ref": "InternetGateway"}
        }
      },
      "SubnetRouteTableAssociation1": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
          "SubnetId": {"Ref": "PublicSubnet1"},
          "RouteTableId": {"Ref": "RouteTable"}
        }
      },
      "SubnetRouteTableAssociation2": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
          "SubnetId": {"Ref": "PublicSubnet2"},
          "RouteTableId": {"Ref": "RouteTable"}
        }
      },
      "WebserverSG": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
          "GroupDescription": "Allow SSH and HTTP access",
          "VpcId": {"Ref": "EngineeringVpc"},
          "SecurityGroupIngress": [
            {
              "IpProtocol": "tcp",
              "FromPort": "22",
              "ToPort": "22",
              "CidrIp": {"Ref": "YourIp"}
            },
            {
              "IpProtocol": "tcp",
              "FromPort": "80",
              "ToPort": "80",
              "CidrIp": "0.0.0.0/0"
            }
          ]
        }
      },
      "Webserver1": {
        "Type": "AWS::EC2::Instance",
        "Properties": {
          "InstanceType": {"Ref": "InstanceType"},
          "KeyName": {"Ref": "KeyPair"},
          "ImageId": "ami-01cc34ab2709337aa",
          "SubnetId": {"Ref": "PublicSubnet1"},
          "SecurityGroupIds": [{"Ref": "WebserverSG"}],
          "UserData": {"Fn::Base64": "#!/bin/bash\nyum update -y\nyum install -y httpd php\nservice httpd start\nchkconfig httpd on\naws s3 cp s3://seis665-public/index.php /var/www/html/index.php\n"}
        }
      },
      "Webserver2": {
        "Type": "AWS::EC2::Instance",
        "Properties": {
          "InstanceType": {"Ref": "InstanceType"},
          "KeyName": {"Ref": "KeyPair"},
          "ImageId": "ami-01cc34ab2709337aa",
          "SubnetId": {"Ref": "PublicSubnet2"},
          "SecurityGroupIds": [{"Ref": "WebserverSG"}],
          "UserData": {"Fn::Base64": "#!/bin/bash\nyum update -y\nyum install -y httpd php\nservice httpd start\nchkconfig httpd on\naws s3 cp s3://seis665-public/index.php /var/www/html/index.php\n"}
        }
      },
      "LoadBalancer": {
        "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
        "Properties": {
          "Subnets": [{"Ref": "PublicSubnet1"}, {"Ref": "PublicSubnet2"}],
          "SecurityGroups": [{"Ref": "WebserverSG"}]
        }
      },
      "TargetGroup": {
        "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
        "Properties": {
          "VpcId": {"Ref": "EngineeringVpc"},
          "Port": 80,
          "Protocol": "HTTP",
          "TargetType": "instance",
          "Targets": [{"Id": {"Ref": "Webserver1"}}, {"Id": {"Ref": "Webserver2"}}]
        }
      },
      "Listener": {
        "Type": "AWS::ElasticLoadBalancingV2::Listener",
        "Properties": {
          "DefaultActions": [{
            "Type": "forward",
            "TargetGroupArn": {"Ref": "TargetGroup"}
          }],
          "LoadBalancerArn": {"Ref": "LoadBalancer"},
          "Port": 80,
          "Protocol": "HTTP"
        }
      }
    },
    "Outputs": {
      "WebUrl": {
        "Description": "URL of the load balancer",
        "Value": {"Fn::GetAtt": ["LoadBalancer", "DNSName"]}
      }
    }
  }
   